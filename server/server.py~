print "Tribe Venture Server"
import os,sys,time
try:    import cPickle as pickle
except: import pickle as pickle
sys.path.append(os.path.split(sys.path[0])[0])
from Net import *
from player import *
from servercache import *

########    BEGIN PLAYER SERVER    #########


class GameServer(TCPServer):
    def __init__(self):
        TCPServer.__init__(self)
        self.Cache = ServerCache()
        self.Cache.makePlayerDict()
        self.average_ping = 0
        self.pinglist = [100,100,100,100,100]
        
    def connect_func(self,sock,host,port):
        print "Server successfully connected to %s on port %s!" % (host,port)
    def client_connect_func(self,sock,host,port,address):
        print "A client, (ip: %s, code: %s) connected on port %s!" % (address[0],address[1],port)
        self.newclient = [address[0], address[1]]
        print "NEWCLIENT: " + str(address[0]) + " and " + str(address[1])
        #print "self.newclient: "+str(self.newclient)
    def client_disconnect_func(self,sock,host,port,address):
        print "A client, (ip: %s, code: %s) disconnected from port %s!" % (address[0],address[1],port)
        print "ADDRESS", address
        for x in self.Cache.playingdict:
            print "X",x
            if x == address[1]:
                print "X DISCONNN"
                self.Cache.sysdict.get(self.Cache.playingdict.get(address[1]).system).players.remove(x)
                self.Cache.playingdict.pop(x)                
                break
    def handle_data(self, data, address):
        if data[0] == "WORLD":                  # WORLD DATA HANDLING
            #print "data"
            #print data
            if data[1] == "update":
                print "WORLD UPDATE"
                self.send_data("thanks")
                return None
            elif data[1] == "sysdict":
                print "SYSTEMS"
                self.Cache.sysdict[data[2]] = pickle.loads(data[3])
                print data[2]
                self.send_data("Nice System")
                return None
            elif data[1] == "init":
                print "INIT WORLD"
                self.send_data("Hello, World")
                return None                   # /WORLD DATA HANDLING

                
        elif data[0] == "update":                    # PLAYER DATA HANDLING
            #for x in self.Cache.playing_dict:
            #    if x == data[0]:
            #        self.client_list.get(x)[2] = data[2]
            #print "UPDATE: " + str(address)
            self.Cache.playingdict.get(address[1]).pos = data[1]
            update = self.Cache.sysdict.get(self.Cache.playingdict.get(address[1]).system).players
            playerdict = {}
            for x in update:
                playerdict[x] = self.Cache.playingdict.get(x)
            print "playerdict",playerdict
            print self.Cache.playingdict.get(address[1])
            print self.Cache.playingdict.get(address[1]).system
            print "update: "
            print update
            self.send_data(["update", update, playerdict])
            return 0
        elif data[0] == "pos_plus":
            pass
        elif data[0] == "jump":
            self.send_data(["system", self.Cache.sysdict.get(data[1])])
        elif data[0] == "sell":
            pass
        elif data[0] == "buy":
            pass
        elif data[0] == "command":
            pass
        elif data[0] == "board":
            pass
        elif data[0] == "target":
            pass
        elif data[0] == "land":
            self.send_data(["granted"])
        elif data[0] == "embark":
            self.send_data(["granted"])
        elif data[0] == "credentials":
            print "player name " + data[1] + " requests permission to join,"
            print "using password: " + data[2]
            try:
                password = self.Cache.playerdict.get(data[1]).get("[password]")
                if password == data[2]:
                    print "password confirmation: ", password, ", request granted." 
                    self.send_data(["identity", "confirmed", "Welcome!"])
                    print "[SERVER:] ",data[1]," has joined at ",time.asctime()
                    startsystem = "Sol"
                    print "SYSDICT",self.Cache.sysdict
                    system = self.Cache.sysdict.get(startsystem)
                    print "system",system
                    self.Cache.playingdict[self.newclient[1]] = ConnectPlayer(data[1],self.newclient[1],startsystem)
                    print "playingdict: ",self.Cache.playingdict
                    self.send_data(["startdict", system, self.newclient[1]])
                    self.Cache.sysdict.get(startsystem).players.append(self.newclient[1])
                else:
                    print "password invalid: " + password
                    "request denied!"
                    self.send_data(["identity", "invalid", "try again"])
            except:
                print "invalid player name or password!"
                self.send_data(["identity", "invalid", "try again"])
        # else:
            #print "ANOMOLOUS DATA!"
            #print data


########    END PLAYER SERVER    ########

def main():
    gameserver = GameServer()
    gameserver.connect("localhost",6317)
    gameserver.serve_forever()
    gameserver.quit()
if __name__ == '__main__': main()
